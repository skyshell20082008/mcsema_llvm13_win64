# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.8)
   message(FATAL_ERROR "CMake >= 2.8.0 required")
endif()
if(CMAKE_VERSION VERSION_LESS "2.8.3")
   message(FATAL_ERROR "CMake >= 2.8.3 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.8.3...3.22)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_cmake_targets_defined "")
set(_cmake_targets_not_defined "")
set(_cmake_expected_targets "")
foreach(_cmake_expected_target IN ITEMS remill_arch_aarch32 remill_arch_aarch64 remill_arch_sparc32 remill_arch_sparc64 remill_arch_sleigh remill_arch_x86 remill_arch remill_bc remill_os remill_version remill remill_settings)
  list(APPEND _cmake_expected_targets "${_cmake_expected_target}")
  if(TARGET "${_cmake_expected_target}")
    list(APPEND _cmake_targets_defined "${_cmake_expected_target}")
  else()
    list(APPEND _cmake_targets_not_defined "${_cmake_expected_target}")
  endif()
endforeach()
unset(_cmake_expected_target)
if(_cmake_targets_defined STREQUAL _cmake_expected_targets)
  unset(_cmake_targets_defined)
  unset(_cmake_targets_not_defined)
  unset(_cmake_expected_targets)
  unset(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT _cmake_targets_defined STREQUAL "")
  string(REPLACE ";" ", " _cmake_targets_defined_text "${_cmake_targets_defined}")
  string(REPLACE ";" ", " _cmake_targets_not_defined_text "${_cmake_targets_not_defined}")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_cmake_targets_defined_text}\nTargets not yet defined: ${_cmake_targets_not_defined_text}\n")
endif()
unset(_cmake_targets_defined)
unset(_cmake_targets_not_defined)
unset(_cmake_expected_targets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target remill_arch_aarch32
add_library(remill_arch_aarch32 STATIC IMPORTED)

set_target_properties(remill_arch_aarch32 PROPERTIES
  INTERFACE_LINK_LIBRARIES "remill_settings"
)

# Create imported target remill_arch_aarch64
add_library(remill_arch_aarch64 STATIC IMPORTED)

set_target_properties(remill_arch_aarch64 PROPERTIES
  INTERFACE_LINK_LIBRARIES "remill_settings"
)

# Create imported target remill_arch_sparc32
add_library(remill_arch_sparc32 STATIC IMPORTED)

set_target_properties(remill_arch_sparc32 PROPERTIES
  INTERFACE_LINK_LIBRARIES "remill_settings"
)

# Create imported target remill_arch_sparc64
add_library(remill_arch_sparc64 STATIC IMPORTED)

set_target_properties(remill_arch_sparc64 PROPERTIES
  INTERFACE_LINK_LIBRARIES "remill_settings"
)

# Create imported target remill_arch_sleigh
add_library(remill_arch_sleigh STATIC IMPORTED)

set_target_properties(remill_arch_sleigh PROPERTIES
  INTERFACE_LINK_LIBRARIES "remill_settings"
)

# Create imported target remill_arch_x86
add_library(remill_arch_x86 STATIC IMPORTED)

set_target_properties(remill_arch_x86 PROPERTIES
  INTERFACE_LINK_LIBRARIES "remill_settings"
)

# Create imported target remill_arch
add_library(remill_arch STATIC IMPORTED)

set_target_properties(remill_arch PROPERTIES
  INTERFACE_LINK_LIBRARIES "remill_arch_aarch32;remill_arch_aarch64;remill_arch_sleigh;remill_arch_sparc32;remill_arch_sparc64;remill_arch_x86;\$<LINK_ONLY:remill_settings>"
)

# Create imported target remill_bc
add_library(remill_bc STATIC IMPORTED)

set_target_properties(remill_bc PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:remill_settings>"
)

# Create imported target remill_os
add_library(remill_os STATIC IMPORTED)

set_target_properties(remill_os PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:remill_settings>"
)

# Create imported target remill_version
add_library(remill_version STATIC IMPORTED)

set_target_properties(remill_version PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:remill_settings>"
)

# Create imported target remill
add_library(remill INTERFACE IMPORTED)

set_target_properties(remill PROPERTIES
  INTERFACE_LINK_LIBRARIES "LLVMSupport;LLVMCore;LLVMIRReader;LLVMBitReader;LLVMBitWriter;LLVMPasses;LLVMAsmPrinter;LLVMAArch64CodeGen;LLVMAArch64AsmParser;LLVMARMCodeGen;LLVMARMAsmParser;LLVMInterpreter;LLVMMCJIT;LLVMNVPTXDesc;LLVMX86CodeGen;LLVMX86AsmParser;LLVMSparcCodeGen;LLVMSparcAsmParser;LLVMWebAssemblyDesc;XED::XED;glog::glog;gflags::gflags;sleigh::sla;sleigh::decomp;sleigh::support;remill_bc;remill_os;remill_arch;remill_version"
)

# Create imported target remill_settings
add_library(remill_settings INTERFACE IMPORTED)

set_target_properties(remill_settings PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "_CRT_SECURE_NO_DEPRECATE;_CRT_SECURE_NO_WARNINGS;_CRT_NONSTDC_NO_DEPRECATE;_CRT_NONSTDC_NO_WARNINGS;_SCL_SECURE_NO_DEPRECATE;_SCL_SECURE_NO_WARNINGS;GOOGLE_PROTOBUF_NO_RTTI;REMILL_INSTALL_SEMANTICS_DIR=\"D:/test/share/remill/14/semantics\";REMILL_BUILD_SEMANTICS_DIR_X86=\"D:/Prj/LLVM_Decompile/build/lib/Arch/X86/Runtime\";REMILL_BUILD_SEMANTICS_DIR_AARCH32=\"D:/Prj/LLVM_Decompile/build/lib/Arch/AArch32/Runtime\";REMILL_BUILD_SEMANTICS_DIR_AARCH64=\"D:/Prj/LLVM_Decompile/build/lib/Arch/AArch64/Runtime\";REMILL_BUILD_SEMANTICS_DIR_SPARC32=\"D:/Prj/LLVM_Decompile/build/lib/Arch/SPARC32/Runtime\";REMILL_BUILD_SEMANTICS_DIR_SPARC64=\"D:/Prj/LLVM_Decompile/build/lib/Arch/SPARC64/Runtime\""
  INTERFACE_COMPILE_OPTIONS "\$<\$<CONFIG:Debug>:/MTd>\$<\$<CONFIG:Release>:/MT>;/nologo;/W3;/EHsc;/wd4141;/wd4146;/wd4180;/wd4244;/wd4258;/wd4267;/wd4291;/wd4345;/wd4351;/wd4355;/wd4456;/wd4457;/wd4458;/wd4459;/wd4503;/wd4624;/wd4722;/wd4800;/wd4100;/wd4127;/wd4512;/wd4505;/wd4610;/wd4510;/wd4702;/wd4245;/wd4706;/wd4310;/wd4701;/wd4703;/wd4389;/wd4611;/wd4805;/wd4204;/wd4577;/wd4091;/wd4592;/wd4324"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "LLVMSupport;LLVMCore;LLVMIRReader;LLVMBitReader;LLVMBitWriter;LLVMPasses;LLVMAsmPrinter;LLVMAArch64CodeGen;LLVMAArch64AsmParser;LLVMARMCodeGen;LLVMARMAsmParser;LLVMInterpreter;LLVMMCJIT;LLVMNVPTXDesc;LLVMX86CodeGen;LLVMX86AsmParser;LLVMSparcCodeGen;LLVMSparcAsmParser;LLVMWebAssemblyDesc;XED::XED;glog::glog;gflags::gflags;sleigh::sla;sleigh::decomp;sleigh::support"
)

if(CMAKE_VERSION VERSION_LESS 3.0.0)
  message(FATAL_ERROR "This file relies on consumers using CMake 3.0.0 or greater.")
endif()

# Load information for each installed configuration.
file(GLOB _cmake_config_files "${CMAKE_CURRENT_LIST_DIR}/remillTargets-*.cmake")
foreach(_cmake_config_file IN LISTS _cmake_config_files)
  include("${_cmake_config_file}")
endforeach()
unset(_cmake_config_file)
unset(_cmake_config_files)

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(_cmake_target IN LISTS _cmake_import_check_targets)
  foreach(_cmake_file IN LISTS "_cmake_import_check_files_for_${_cmake_target}")
    if(NOT EXISTS "${_cmake_file}")
      message(FATAL_ERROR "The imported target \"${_cmake_target}\" references the file
   \"${_cmake_file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
    endif()
  endforeach()
  unset(_cmake_file)
  unset("_cmake_import_check_files_for_${_cmake_target}")
endforeach()
unset(_cmake_target)
unset(_cmake_import_check_targets)

# Make sure the targets which have been exported in some other
# export set exist.
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
foreach(_target "sleigh::sla" "sleigh::decomp" "sleigh::support" )
  if(NOT TARGET "${_target}" )
    set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets "${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets} ${_target}")
  endif()
endforeach()

if(DEFINED ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
  if(CMAKE_FIND_PACKAGE_NAME)
    set( ${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
    set( ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}")
  else()
    message(FATAL_ERROR "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}")
  endif()
endif()
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
